<!--HTML-->

<!DOCTYPE html>
<html lang ="en" dir="ltr">
    <head>
        <meta charset="utf-8">
        <title>Language Translator</title>
        <link rel= "stylesheet" href="style.css">
        <meta name="viewport" content="width=device-width , initial-scale=1.0 ">
        <!-- Font Awesome CDN Link for Icon-->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    </head>
    <body>
        <div class="container">
            <div class="wrapper">
                <div class="text-input">
                    <textarea class="from-text" placeholder="Enter text"></textarea>
                    <textarea class="to-text" placeholder="Translator" readonly disabled></textarea>
                </div>
                <ul class="controls">
                    <li class ="row from">
                        <div class="icons">
                            <i  id="from" class="fas fa-volume-up"></i>
                            <i id="from" class="fas fa-copy"></i>
                        </div>
                        <select>
                           
                        </select>
                    </li>
                    <li class="exchange"><i class="fas fa-exchange-alt"></i></li>
                    <li class ="row to">                       
                        <select>
                           
                        </select>
                        <div class="icons">
                            <i  id="from" class="fas fa-volume-up"></i>
                            <i id="from" class="fas fa-copy"></i>
                        </div>
                    </li>
                </ul>
            </div>
            <button>Translate Text</button>
        </div>

        <script src ="countries.js"></script>
        <script src="main.js"></script>
    </body>
</html>

<!--CSS-->

/* Import Google font  */
  @import url('https://fonts.googleapis.com/css2?family=Comme&family=Oxygen:wght@300;400;700&display=swap');

*{
    margin:0;
    padding:0;
    box-sizing: border-box;
    font-family:'Poppins',sans-serif;
}
body{
    display:flex;
    align-items: center;
    justify-content: center;
    min-height:100vh;
    background-color:rgb(78, 79, 83)
}
.container{
    width:690px;
    background-color: #fff;
    border-radius: 7px;
    padding:30px;
}
.wrapper{
  border-radius:5px;
  border: 1px solid #bbb;  
}
.wrapper .text-input{
    display:flex;
    border-bottom: 1px solid #bbb;

}
.text-input .to-text{
    border-radius: 0px;
    border-left:1px solid #bbb;
}
.text-input textarea{
    height:250px;
    width:100%;
    border:none;
    outline:none;
    border-radius: 5px;
    resize:none;
    font-size: 18px;
    background: none;
    padding: 10px 15px;
}
.controls, li , .icons, .icons i{
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.controls{
    list-style: none;
    padding:12px 15px;
}
.controls .row.from .icons{
    border-right: 1px solid #bbb;
    padding-right:15px;
}
.controls .row.to .icons{
    border-right: 1px solid #bbb;
    padding-right:15px;
}
.controls .icons{
    width:38%;
} 
.controls .icons i{
    width:50px;
    color: #9f9f9f;
    font-size: 14px;
    cursor: pointer;
    justify-content: center;
}
.controls .row select{
     border:none;
     outline: none;
     background:none;
     font-size: 18px;
}
.controls .exchange{
    color:#9f9f9f;
    font-size: 16px;
    cursor:pointer;
}
.container button{
    width:100%;
    padding:14px;
    margin-top:20px;
    border: none;
    outline:none;
    cursor:pointer;
    font-size: 17px;
    border-radius: 5px;
    background: #404043;
    color:#fff;
}

<!--JavaScript-->

const fromText = document.querySelector(".from-text");
const toText = document.querySelector(".to-text");
const exchangeIcon = document.querySelector(".exchange");
const selectTag = document.querySelectorAll("select");
const translateBtn = document.querySelector("button");
const icons = document.querySelectorAll(".row i");

selectTag.forEach((tag, id) => {
  for (const country_code in countries) {
    let selected = "";
    if (id === 0 && country_code === "en-US") {
      selected = "selected";
    } else if (id === 1 && country_code === "hi-IN") {
      selected = "selected";
    }

    let option = `<option value="${country_code}" ${selected}>${countries[country_code]}</option>`;
    tag.insertAdjacentHTML("beforeend", option);
  }
});

exchangeIcon.addEventListener("click", () => {
  let tempText = fromText.value;
  let tempLang = selectTag[0].value;
  fromText.value = toText.value;
  selectTag[0].value = selectTag[1].value;
  toText.value = tempText;
  selectTag[1].value = tempLang;
});

translateBtn.addEventListener("click", () => {
  let text = fromText.value;
  let translateFrom = selectTag[0].value;
  let translateTo = selectTag[1].value;

  if (!text) return;

  toText.setAttribute("placeholder", "Translating...");
  let apiUrl = `https://api.mymemory.translated.net/get?q=${text}&langpair=${translateFrom}|${translateTo}`;

  fetch(apiUrl)
    .then((res) => res.json())
    .then((data) => {
      toText.value = data.responseData.translatedText;
      toText.setAttribute("placeholder", "Translation");
    });
});

icons.forEach((icon) => {
  icon.addEventListener("click", ({ target }) => {
    if (target.classList.contains("fa-copy")) {
      if (target.id === "from") {
        navigator.clipboard.writeText(fromText.value);
      } else {
        navigator.clipboard.writeText(toText.value);
      }
    } else {
      let utterance;
      if (target.id === "from") {
        utterance = new SpeechSynthesisUtterance(fromText.value);
        utterance.lang = selectTag[0].value;
      } else {
        utterance = new SpeechSynthesisUtterance(toText.value);
        utterance.lang = selectTag[1].value;
      }
      speechSynthesis.speak(utterance);
    }
  });
});
